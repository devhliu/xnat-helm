apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.xnatWeb.config.xnat.name }}
data:
  make-xnat-config.sh: |-
    apk add --no-cache postgresql-client wget
    rm -rf ${CATALINA_HOME}/webapps/*
    mkdir -p \
      ${CATALINA_HOME}/webapps/${TOMCAT_XNAT_FOLDER} \
      ${XNAT_HOME}/config \
      ${XNAT_HOME}/logs \
      ${XNAT_HOME}/plugins \
      ${XNAT_HOME}/work \
      ${XNAT_ROOT}/archive \
      ${XNAT_ROOT}/build \
      ${XNAT_ROOT}/cache \
      ${XNAT_ROOT}/ftp \
      ${XNAT_ROOT}/pipeline \
      ${XNAT_ROOT}/prearchive

    # generate xnat config
    if [ ! -f ${XNAT_HOME}/config/xnat-conf.properties ]; then
      cat > ${XNAT_HOME}/config/xnat-conf.properties << EOF
    datasource.driver=${XNAT_DATASOURCE_DRIVER}
    datasource.url=${XNAT_DATASOURCE_URL}
    datasource.username=${XNAT_DATASOURCE_USERNAME}
    datasource.password=${XNAT_DATASOURCE_PASSWORD}
    hibernate.dialect=${XNAT_HIBERNATE_DIALECT}
    hibernate.hbm2ddl.auto=update
    hibernate.show_sql=false
    hibernate.cache.use_second_level_cache=true
    hibernate.cache.use_query_cache=true
    spring.activemq.broker-url=${ACTIVEMQ_BROKER_URL}
    spring.activemq.user=${ACTIVEMQ_USER}
    spring.activemq.password=${ACTIVEMQ_PASSWORD}
    spring.http.multipart.max-file-size=${MAX_FILE_SIZE}
    spring.http.multipart.max-request-size=${MAX_REQUEST_SIZE}
    EOF
    fi

    cd ${CATALINA_HOME}/webapps/
    wget {{ .Values.xnatWeb.config.warFile.downloadUrl }}/{{ .Values.xnatWeb.config.warFile.name }}
    cd ${TOMCAT_XNAT_FOLDER}
    unzip -o ../{{ .Values.xnatWeb.config.warFile.name }}
    rm -f ../{{ .Values.xnatWeb.config.warFile.name }}
    apk del wget
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.xnatWeb.config.postgres.name }}
data:
  {{ .Values.xnatWeb.config.postgres.script }}: |-
    #!/bin/sh
    # {{ .Values.xnatWeb.config.postgres.script }}

    set -e

    cmd="$@"

    until psql -U "${XNAT_DATASOURCE_USERNAME}" -h {{ .Values.xnatDb.name }} -c '\q'; do
      >&2 echo "Postgres is unavailable - sleeping"
      sleep 5
    done

    >&2 echo "Postgres is up - executing command \"$cmd\""
    exec $cmd
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.xnatDb.name }}
data:
  {{ .Values.xnatDb.init.script }}: |-
    CREATE EXTENSION pg_trgm;
    CREATE USER {{ .Values.xnatWeb.env.dataSource.username }} NOCREATEDB;
    CREATE DATABASE {{ .Values.xnatWeb.env.dataSource.username }} OWNER {{ .Values.xnatWeb.env.dataSource.username }};
    ALTER USER {{ .Values.xnatWeb.env.dataSource.username }} WITH PASSWORD '{{ .Values.xnatWeb.env.dataSource.password }}';
    CREATE USER orthanc NOCREATEDB;
    CREATE DATABASE orthanc OWNER orthanc;
    ALTER USER orthanc WITH PASSWORD 'orthanc';

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.xnatDbAdmin.name }}
data:
  {{ .Values.xnatDbAdmin.config.servers }}: |-
    {
      "Servers": {
        "1": {
          "Name": "xnat-db",
          "Group": "Servers",
          "Host": "xnat-db",
          "Port": 5432,
          "MaintenanceDB": "xnat",
          "Username": "xnat",
          "SSLMode": "prefer",
          "SSLCert": "<STORAGE_DIR>/.postgresql/postgresql.crt",
          "SSLKey": "<STORAGE_DIR>/.postgresql/postgresql.key",
          "SSLCompression": 0,
          "Timeout": 10,
          "UseSSHTunnel": 0,
          "TunnelPort": "22",
          "TunnelAuthentication": 0
        },
        "2": {
          "Name": "xnat-orthanc",
          "Group": "Servers",
          "Host": "xnat-db",
          "Port": 5432,
          "MaintenanceDB": "orthanc",
          "Username": "orthanc",
          "SSLMode": "prefer",
          "SSLCert": "<STORAGE_DIR>/.postgresql/postgresql.crt",
          "SSLKey": "<STORAGE_DIR>/.postgresql/postgresql.key",
          "SSLCompression": 0,
          "Timeout": 10,
          "UseSSHTunnel": 0,
          "TunnelPort": "22",
          "TunnelAuthentication": 0
        }
      }
    }
